# =====================================================================
# Cloud selection
# =====================================================================
#
# currently configured for EC2, but can also be something else. For a complete listing of supported clouds,
# check the following link: http://jclouds.apache.org/reference/providers/
# aws-ec2 = Amazon EC2
# google-compute-engine = The Google Compute Engine.
#
CLOUD_PROVIDER=aws-ec2


# =====================================================================
# Cloud credentials
# =====================================================================
#
# The path to a file containing the identity (aws access key). The login (and credentials) can't be directly
# added to the value because it is too easy to commit them. These files you probably want to keep outside of
# your project directly to prevent them from accidentally being committed or being zipped and send to someone.
#
CLOUD_IDENTITY=~/ec2.identity
#
# The path to the file containing your credential (aws secret key).
#
CLOUD_CREDENTIAL=~/ec2.credential

# =====================================================================
# Cloud Tweaks
# =====================================================================
#
# Some clouds get overloaded with requests from jclouds, e.g. ec. With these settings you can control
# how much load you are putting on the cloud api's.
#
# time in milliseconds between cloud requests. default: 50
#
CLOUD_POLL_INITIAL_PERIOD=50

#
# maximum time between polls, default 1000
#
CLOUD_POLL_MAX_PERIOD=5000

#
# the number of machines started/terminated in 1 go. On ec2 20 seems a save amount.
#
CLOUD_BATCH_SIZE=20

#
# Just a prefix for the agent name. Different test clusters could be given different names. In GCE you need
# to be very careful using multiple group-names, because for every port and every group-name a firewall rule is
# made and you can only have 100 firewall rules.
#
# If the name contains ${username}, this section will be replaced by the actual user that runs the
# test. This makes it very easy to identity which user is owning a certain machine.
#
GROUP_NAME=stabilizer-agent-${username}

#
# The name of the user on your local machine.
#
# JClouds will automatically make a new user on the remote machine  with this name as loginname. It will also copy
# the public key of your system to the remote machine and add it to the ~/.ssh/authorized_keys. So once the instance
# is created, you can login with 'ssh USER@ip'.
#
# The default value 'stabilizer' is fine in most cases. So probably you don't want to change this.
#
USER=stabilizer

#
# The options added to SSH. Probably you don't need to change this.
#
SSH_OPTIONS=-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null

#
# The name of the security group, the creates machines belong to.
#
# EC2:
# If the security group doesn't exist, it will automatically be created. If you did not specify
# a locationId in the MACHINES_SPEC, the location will be us-east-1. If it does exist, make sure
# that port 22, 9000, 9001 and 5701..5751 are open. In most cases the default value is fine.
#
# GCE:
# The value is not relevant.

SECURITY_GROUP=stabilizer

# =====================================================================
# Hardware and OS selection
# =====================================================================
#
# For the options that can be set on the spec check the following link:
# http://javadocs.jclouds.cloudbees.net/org/jclouds/compute/domain/TemplateBuilderSpec.html
#
# Operating system and version can be selected using:
#   osVersionMatches=[String]
#   os64Bit=[boolean]
#   osArchMatches=[String]
#   osDescriptionMatches=[String]
# For list of available operating systems see:
# http://javadocs.jclouds.cloudbees.net/org/jclouds/compute/domain/OsFamily.html
#
# Examples:
#       osFamily=UBUNTU,osVersionMatches=12.04
#       osFamily=CENTOS
#       osFamily=RHEL,os64Bit
#       osDescription=.*Ubuntu 12.04.*
#
# A specific AMI can also be selected using an imageId e.g.
#
#       imageId=us-east-1/ami-fb8e9292
#
# Warning:
#       If you want to use RHEL, use the following ami us-east-1/ami-1b3b2472.
#       The ones listed in EC2 are not working; jclouds messes up with the account initialization.
#
# Hardware can be selected e.g.
# MACHINE_SPEC=minCores=2,minRam=2048
#
# You can also explicitly set hardware id, e.g. on ec2:
# hardwareId=m1.small.
# for a full listing of hardware id's on EC2, check the following link
# http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/index.html?instance-types.html
#
# To set a specific region, use locationId, e.g. locationId=us-east-1a.
# The security group will be created in the location specified.
#
# Some useful regions are:
# EU (Ireland) Region	eu-west-1
# Asia Pacific (Sydney) Region	ap-southeast-2
# US East (Northern Virginia) Region	us-east-1
# US West (Northern California) Region	us-west-1
#
# The default region is us-east-1
# The default AMI is RHEL_6.5_x64
#
MACHINE_SPEC=hardwareId=c3.xlarge,imageId=us-east-1/ami-1b3b2472


# =====================================================================
# Hazelcast Version Configuration
# =====================================================================
#
# The workers can be configured to use a specific version of Hazelcast; so you don't need to depend on the Hazelcast
# version provided by the stabilizer, but you can override it with a specific version.
#
# The Hazelcast version can be configured in different ways:
#   outofthebox             : if you are fine with the one provided by the Stabilizer itself.
#   maven=version           : if you want to use a specific version from the maven repository, e.g.
#                                   maven=3.2
#                                   maven=3.3-SNAPSHOT
#                             Local Hazelcast artifacts will be preferred, so you can checkout e.g. an experimental
#                             branch, build the artifacts locally. This will all be done on the local machine, not
#                             on the agent machine.
#   bringmyown              : if you want to bring your own dependencies, for more information checkout out the
#                             --workerClassPath setting on the Controller.
HAZELCAST_VERSION_SPEC=outofthebox

# =====================================================================
# JDK Installation
# =====================================================================
#
# Warning:
#   Currently only 64 bit JVM's are going to be installed if you select something else then outofthebox.
#   So make sure that your OS is 64 bits! On option to select 32/64 bits will be added in the future.
#
# The following 4 flavors are available:
#   oracle
#   openjdk
#   ibm
#   outofthebox
# out of the box is the one provided by the image. So no software is installed by the Stabilizer.
#
JDK_FLAVOR=openjdk

#
# If a 64 bits JVM should be installed. Currently only true is allowed.
#
JDK_64_BITS=true

#
# The version of java to install.
#
# Oracle supports 6/7/8
# OpenJDK supports 6/7
# IBM supports 6/7/8 (8 is an early access version)
#
# Fine grained control on the version will be added in the future. Currently it is the most recent released version.
#
JDK_VERSION=7

# =====================================================================
# Profiler configuration
# =====================================================================
#
# Warning: Yourkit only works on 64 bit linux distro's for the time being. No support for windows
# or mac.
#
# The worker can be configured with a profiler. The following options are available:
#   none
#   yourkit
#   hprof
#   perf
#
PROFILER=none

#
# The settings for Yourkit agent.
#
# When Yourkit is enabled, a snapshot is created an put in the worker home directory. So when the artifacts
# are downloaded, the snapshots are included and can be loaded with your Yourkit GUI.
#
# Make sure that the path matches the JVM 32/64 bits. In the future this will be automated.
#
# The libypagent.so files, which are included in Stabilizer, are for "YourKit Java Profiler 2013".
#
# For more information about the Yourkit setting, see:
#   http://www.yourkit.com/docs/java/help/agent.jsp
#   http://www.yourkit.com/docs/java/help/startup_options.jsp
#
YOURKIT_SETTINGS=-agentpath:${STABILIZER_HOME}/yourkit/linux-x86-64/libyjpagent.so=dir=${WORKER_HOME},sampling

#
# The settings for the HProf profiler which is part of the JDK.
#
# By default a 'java.hprof.txt' is created in the worker directory. Which can be downloaded with the
# 'provisioner --download' command after the test has run.
#
# For configuration options see:
#   http://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html
#
HPROF_SETTINGS=-agentlib:hprof=cpu=samples,depth=10

#
# The settings for the 'perf' profiler; available for Linux.
#
# https://perf.wiki.kernel.org/index.php/Tutorial#Sampling_with_perf_record
#
# The settings is the full commandline for 'perf record' excluding the actual arguments for the java program
# to start; these will be provided by the Agent. Once the coordinator completes, all the artifacts (including
# the perf.data created by perf) can be downloaded with 'provisioner --download'. Another option is to log into
# the agent machine and do a 'perf report' locally.
#
# TODO:
# More work needed on documentation to get perf running correctly.
#
# If you get the following message:
#           Kernel address maps (/proc/{kallsyms,modules}) were restricted.
#           Check /proc/sys/kernel/kptr_restrict before running 'perf record'.
# Apply the following under root:
#           echo 0 > /proc/sys/kernel/kptr_restrict
# To make it permanent, add it to /etc/rc.local
#
# If you get the following message while doing call graph analysis (-g)
#            No permission to collect stats.
#            Consider tweaking /proc/sys/kernel/perf_event_paranoid.
# Apply the following under root:
#           echo -1 > /proc/sys/kernel/perf_event_paranoid
# To make it permanent, add it to /etc/rc.local
#
PERF_SETTINGS=perf record -o perf.data --quiet
#PERF_SETTINGS=perf record -o perf.data --quiet -e cpu-cycles -e cpu-clock -e context-switches