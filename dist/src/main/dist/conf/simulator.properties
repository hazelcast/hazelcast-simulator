# =============================================================================
# Cloud selection
# =============================================================================
#
# Currently configured for EC2, but can also be something else:
# local = statically configured to run on the local machine.
# static = statically configured set of machines.
# aws-ec2 = Amazon EC2

#
# If you are using aws-ec, make sure the SUBNET_ID and PLACEMENT_GROUP
# are set for better performance.
#
CLOUD_PROVIDER=local

#
# Just a prefix for the agent name. Different test clusters could be given
# different names. In GCE you need to be very careful using multiple
# executionGroup-names, because for every port and every executionGroup-name a
# firewall rule is made and you can only have 100 firewall rules.
#
# If the name contains ${username}, this section will be replaced by the actual
# user that runs the test. This makes it very easy to identity which user is
# owning a certain machine.
#
GROUP_NAME=simulator-agent-${username}

#
# The name of the SIMULATOR_USER on remote machines
#
# The default value 'simulator' is fine in most cases. So probably you don't
# want to change this.
#
SIMULATOR_USER=simulator

#
# The options added to SSH. Probably you don't need to change this.
#
SSH_OPTIONS=-o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null

#
# The name of the security group, the creates machines belong to.
#
# EC2:
# If the security group doesn't exist, it will automatically be created. If you
# did not specify a locationId in the MACHINES_SPEC, the location will be us-east-1.
# If it does exist, make sure that port 22, 9000, 9001 and 5701..5751 are open.
# In most cases the default value is fine.
#
# Others:
# The value is not relevant.
SECURITY_GROUP=simulator

#
# EC2:
# You can specify VPC subnet ID. If SUBNET_ID is different than 'default' then
# machines are created in EC2 VPC and the SECURITY_GROUP option is ignored.
#
# Check the following link to define a VPC:
# https://console.aws.amazon.com/vpc
#
# SUBNET_ID has to exist before it's used.
#
# GCE:
# The value is not relevant
#
# Example 'SUBNET_ID=subnet-378d2140'
#
SUBNET_ID=default

# EC2:
# You can specify extra arguments to the `aws ec2 run-instances` create command
#
# Example:
# EC2_RUN_INSTANCE_ARGS=--placement {\"GroupName\":\"simulator\",\"Tenancy\":\"dedicated\"}
EC2_RUN_INSTANCE_ARGS=default

#
# A placement group is a logical grouping for cluster instances. Placement groups
# have a low latency, full bisection 20 Gbps bandwidth between instances
#
# Example 'PLACEMENT_GROUP=simulator'
#
# Set this when more reliable performance is required.
#
# The following placement groups are available
# simulator (cluster placement group)
# simulator-spread (spread placement group)
# simulator-partition (partition placement group)
#
# Don't combine this setting with EC2_RUN_INSTANCE_ARGS
#
PLACEMENT_GROUP=default

REGION=us-east-1

#
# The id of the image to use.
#
# This is the default: Amazon Linux 2 AMI (HVM),
#
IMAGE_ID=ami-0fc61db8544a617ed

# For a listing of ec2 instance types:
# https://aws.amazon.com/ec2/instance-types/
# http://www.ec2instances.info/
INSTANCE_TYPE=c5.2xlarge

# =============================================================================
# Hazelcast Version Configuration
# =============================================================================
#
# The workers can be configured to use a specific version of Hazelcast; so
# you don't need to depend on the Hazelcast version provided by the simulator,
# but you can override it with a specific version.
#
# The Hazelcast version can be configured in different ways:
#   outofthebox             : if you are fine with the one provided by the
#                             Simulator itself.
#   maven=version           : if you want to use a specific version from the maven
#                             repository, e.g.
#                                   maven=4.0
#                                   maven=4.1-SNAPSHOT
#                             Local Hazelcast artifacts will be preferred, so you
#                             can checkout e.g. an experimental branch, build the
#                             artifacts locally. This will all be done on the local
#                             machine, not on the agent machine.
#   bringmyown              : if you want to bring your own dependencies. To upload your
#                             dependencies, in the working dir, create an 'upload'
#                             directory. The content of this directory will be
#                             uploaded to the agents and automatically
#                             added to the classpath of the workers.
#   git=version             : if you want Simulator to use a specific version of
#                             Hazelcast from Git, e.g.:
#                                   git=f0288f713    to build a specific revision
#                                   git=v3.2.3       to build a version from a Git tag
#                                   git=myRepository/myBranch - to build a version
#                                   from a branch in a specific repository.
#                             Use GIT_CUSTOM_REPOSITORIES to specify custom repositories. The main Hazelcast
#                             repository is always named "origin".
#
VERSION_SPEC=outofthebox

# When HAZELCAST_VERSION_SPEC is set to Git then it will download Hazelcast
# sources to this directory.
#
GIT_BUILD_DIR=~/.hazelcast-build/

# Comma separated list of additional Git repositories to be fetched when
# HAZELCAST_VERSION_SPEC is set to Git.
#
# Simulator will always fetch https://github.com/hazelcast/hazelcast
# This property specifies additional repositories. You can use both remote and
# local repositories. Remote repositories must be accessible for anonymous,
# local repositories must be accessible for current user.
#
# Default value: empty, only the main Hazelcast repository is used by default.
#
#GIT_CUSTOM_REPOSITORIES=myFork=https://github.com/jerrinot/hazelcast.git,localRepo=/home/jara/devel/oss/hazelcast

# Path to a local Maven installation to use when HAZELCAST_VERSION_SPEC is
# set to Git.
#
# Default value: Simulator expects 'mvn' binary to be available on a PATH.
#
#MVN_EXECUTABLE=/usr/bin/mvn

# ============================================================================
# Set the following URL to install a tar.gz containing the JDK.
#
# It should be a 64 bit Linux JDK (JRE is not sufficient)
#
# This is the preferred method of installing because you have full control
# on the version to be installed.
#
# If this JDK_URL is set, then JDK_FLAVOR and JDK_VERSION are ignored.
#
# If you want to compare different Java versions for some benchmark, use
# `provisioner --installJava`
# to update the installed Java version. This will download the tar.gz
# extract it and update the JAVA_HOME.
#
# You can also update the java version like this;
# `provisioner --installJava <someurl>`
#
# It works with quite a few Java distributions:
#
# Oracle JDK
#
#       https://www.oracle.com/java/technologies/javase-jdk15-downloads.html
#
#       When selecting the url from the download page, you need to click the link and wait till you get a popop
#       and then select the url.
#
#       Example:
#       JDK_URL=https://simulator-jdk.s3.amazonaws.com/jdk-8u261-linux-x64.tar.gz
#       JDK_URL=https://download.oracle.com/otn-pub/java/jdk/15+36/779bf45e88a44cbd9ea6621d33e33db1/jdk-15_linux-x64_bin.tar.gz
#
# OpenJDK jdk.java.net
#
#       https://jdk.java.net/
#
#       Example:
#       JDK_URL=https://download.java.net/java/GA/jdk9/9.0.4/binaries/openjdk-9.0.4_windows-x64_bin.tar.gz
#       JDK_URL=https://download.java.net/java/ga/jdk11/openjdk-11_linux-x64_bin.tar.gz
#       JDK_URL=https://download.java.net/java/GA/jdk15/779bf45e88a44cbd9ea6621d33e33db1/36/GPL/openjdk-15_linux-x64_bin.tar.gz
#
# AdoptOpenJDK
#
#       https://github.com/AdoptOpenJDK/
#
#       Example of OpenJDK
#       JDK_URL=https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u265-b01_openj9-0.21.0/OpenJDK8U-jdk_x64_linux_openj9_8u265b01_openj9-0.21.0.tar.gz
#       JDK_URL=https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.8%2B10/OpenJDK11U-jdk_x64_linux_hotspot_11.0.8_10.tar.gz
#       JDK_URL=https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk15u-2020-09-17-08-34/OpenJDK15U-jdk_x64_linux_hotspot_2020-09-17-08-34.tar.gz
#
#       Example of OpenJDK + J9
#       JDK_URL=https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u265-b01_openj9-0.21.0/OpenJDK8U-jdk_x64_linux_openj9_8u265b01_openj9-0.21.0.tar.gz
#       JDK_URL=https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/download/jdk-11.0.8%2B10_openj9-0.21.0/OpenJDK11U-jdk_x64_linux_openj9_11.0.8_10_openj9-0.21.0.tar.gz
#
# Graal:
#
#       https://github.com/graalvm/graalvm-ce-builds/
#
#       Example:
#       JDK_URL=https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java8-linux-amd64-20.2.0.tar.gz
#       JDK_URL=https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-amd64-20.2.0.tar.gz
#
# Amazon Coretto:
#
#       https://aws.amazon.com/corretto/
#
#       Example:
#       JDK_URL=https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz
#       JDK_URL=https://corretto.aws/downloads/latest/amazon-corretto-11-x64-linux-jdk.tar.gz
#
# Zulu:
#
#       https://cdn.azul.com/zulu/bin/
#
#       Example:
#       JDK_URL=https://cdn.azul.com/zulu/bin/zulu8.48.0.53-ca-jdk8.0.265-linux_x64.tar.gz
#       JDK_URL=https://cdn.azul.com/zulu/bin/zulu11.41.23-ca-jdk11.0.8-linux_x64.tar.gz
#       JDK_URL=https://cdn.azul.com/zulu/bin/zulu15.27.17-ca-jdk15.0.0-linux_x64.tar.gz
#
# Bellsoft:
#
#       https://bell-sw.com/pages/downloads
#
#       Example:
#       JDK_URL=https://download.bell-sw.com/java/11.0.8+10/bellsoft-jdk11.0.8+10-linux-amd64.tar.gz
#
# ============================================================================
JDK_URL=https://simulator-jdk.s3.amazonaws.com/jdk-8u261-linux-x64.tar.gz

# =============================================================================
# JDK Installation
# =============================================================================
#
# JDK installation for machines provisioned in the cloud. Is ignored
# for static environments.
#
# Warning: there is only support for 64 bit X86 JVMs.
#
# The following 4 flavors are available:
#   ibm
#   outofthebox
#
# "outofthebox" is the Java version provided by the image, so no software is
# installed by Hazelcast Simulator. If you want to use e.g. ARM or something
# else that isn't X86-64, set the value to 'outofthebox' and take care
# of the installation yourself. E.g. using agent-ssh 'sudo yum -y install whatever'
#
# JDK_FLAVOR=ibm

#
# The version of Java to install.
#
# IBM supports 8/9 (9 is an early access version)
# Oracle supports 8/9/11/13
# When using Java 9+, add the following to the jvm arguments
# '--add-modules java.xml.bind'. Otherwise you will get a
# 'java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter'
#
# Versions before Java 8 are not supported because Simulator requires 8+
#
JDK_VERSION=8

#
# URL of Management Center
#
# If set to a valid URL the Management Center will be configured for member nodes.
#
# Example: MANAGEMENT_CENTER_URL=http://localhost:8083/mancenter
#
# Default: none
#
MANAGEMENT_CENTER_URL=none

#
# The update interval for the management center
#
MANAGEMENT_CENTER_UPDATE_INTERVAL=30

#
# Skips the lookup of JARs in the local Maven repository
#
SKIP_LOCAL_MAVEN_REPO_LOOKUP=false

#
# Size of thread pool for Agent to connect to Worker instances.
#
# The default of 0 uses the default number of threads of Netty.
#
AGENT_THREAD_POOL_SIZE = 0

#
# Port for the Agent
#
# Defines the port the Simulator Agent will listens to.
#
AGENT_PORT = 9000

#
# Port for the Hazelcast instance
#
# Defines the port the Hazelcast instances use.
#
HAZELCAST_PORT = 5701

#
# Client Port.
#
# Defines the port the clients connects to. Its default value for HazelcastDriver is HAZELCAST_PORT property value.
#
# CLIENT_PORT = 6701


# Interval for WorkerPerformanceMonitor
#
# Defines the interval for throughput and latency snapshots on the workers.
# 0 disabled tracking performance.
#
WORKER_PERFORMANCE_MONITOR_INTERVAL_SECONDS = 10

#
# Interval for WorkerPingThread
#
# Defines the interval for the WorkerPingThread to ping all workers.
# Also defines the LAST_SEEN_TIMEOUT_SECONDS for the WorkerProcessFailureMonitor
# which is this value multiplied by 3.
#
# Set to -1 to disable PING and WORKER_TIMEOUT detection.
#
WORKER_PING_INTERVAL_SECONDS = 60

#
# Shutdown delay for Member Workers
#
# Defines the delay for the shutdown of Member Workers. When the Coordinator sends
# the shutdown operation to all Workers, the Client Workers execute it immediately,
# while the Member Workers will wait the defined seconds. This should prevent
# unnecessary exceptions on the clients, due to their connected Hazelcast Member
# instance being shutdown first.
#
# Will not be used if there are just Member Workers in the cluster.
#
MEMBER_WORKER_SHUTDOWN_DELAY_SECONDS = 5

#
# The frequency the worker should check if the agent it belongs to is still running.
# This prevents ending up with workers that don't have a running agent.
#
# If set to 0, there is no check
#
WORKER_ORPHAN_INTERVAL_SECONDS=5

#
# Timeout to wait for Worker shutdown
#
# Defines the timeout for the Worker shutdown in the Coordinator. After the timeout
# occurred the Coordinator will not wait any longer for Workers to stop. They may
# still be running and must be manually killed before a new Simulator run can be
# started. You can use the Provisioner tool for this task: provisioner --kill
#
# A worker is shutdown if the process isn't running any longer.
# A 'kill -STOP <somepid>' doesn't kill the process but freezes it.
#
WAIT_FOR_WORKER_SHUTDOWN_TIMEOUT_SECONDS = 120

#
# Timeout in seconds to wait for a worker jvm to startup
#
WORKER_STARTUP_TIMEOUT_SECONDS=60

#
# The port the coordinator remote can contact the coordinator.
#
# To disable the remote access mode, set the port to 0. If you want to enable the
# remote, normally 5000 is used as port.
#
COORDINATOR_PORT=0

#
# The timeout in seconds waiting for a test to complete after it ends the run phase.
#
TEST_COMPLETION_TIMEOUT_SECONDS=300

#
# Path to a settings.xml to be used when retrieving artifacts via Maven.
#
#
# CUSTOM_MAVEN_SETTINGS=/path/to/settings.xml
