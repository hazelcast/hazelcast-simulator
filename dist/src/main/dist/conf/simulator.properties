# suppress inspection "UnusedProperty" for whole file

#
# Options currently are:
# hazelcast
# hazelcast-enterprise
#
VENDOR=hazelcast

# =====================================================================
# Cloud selection
# =====================================================================
#
# Currently configured for EC2, but can also be something else:
# local = statically configured to run on the local machine.
# static = statically configured set of machines.
# aws-ec2 = Amazon EC2
# google-compute-engine = The Google Compute Engine.

# For a complete listing of supported clouds, check the following link: http://jclouds.apache.org/reference/providers/
#
# If you are using aws-ec, make sure the SUBNET_ID and PLACEMENT_GROUP are set for better performance.
#
CLOUD_PROVIDER=local

# =====================================================================
# Cloud credentials
# =====================================================================
#
# The cloud credentials cannot be directly configured as property value. This is to prevent them from accidentally being committed
# or being zipped and sent to someone. We store a path to files instead, which you should keep out of your working directory.
#
# The path to a file containing your identity (AWS access key ID).
#
CLOUD_IDENTITY=~/ec2.identity
#
# The path to the file containing your credential (AWS secret access key).
#
CLOUD_CREDENTIAL=~/ec2.credential

# =====================================================================
# Cloud tweaks
# =====================================================================
#
# Some clouds get overloaded with requests from jclouds, e.g. Amazon EC2. With these settings you can control how much load you
# are putting on the cloud's API.
#
# time in milliseconds between cloud requests. default: 50
#
CLOUD_POLL_INITIAL_PERIOD=50

#
# maximum time between polls, default 1000
#
CLOUD_POLL_MAX_PERIOD=5000

#
# the number of machines started/terminated in 1 go. On EC2 20 seems a save amount.
#
CLOUD_BATCH_SIZE=20

# =====================================================================
# HarakiriMonitor
# =====================================================================
#
# Defines if the HarakiriMonitor should be started for EC2 instances.
# The HarakiriMonitor will kill the instance after a defined amount of time to save money.
#
HARAKIRI_MONITOR_ENABLED=true

#
# The number of seconds before the HarakiriMonitor will kill an EC2 instance.
#
HARAKIRI_MONITOR_WAIT_SECONDS=7200

#
# Just a prefix for the agent name. Different test clusters could be given different names. In GCE you need
# to be very careful using multiple executionGroup-names, because for every port and every executionGroup-name a firewall rule is
# made and you can only have 100 firewall rules.
#
# If the name contains ${username}, this section will be replaced by the actual user that runs the
# test. This makes it very easy to identity which user is owning a certain machine.
#
GROUP_NAME=simulator-agent-${username}

#
# The name of the user on your local machine.
#
# JClouds will automatically make a new user on the remote machine  with this name as loginname. It will also copy
# the public key of your system to the remote machine and add it to the ~/.ssh/authorized_keys. So once the instance
# is created, you can login with 'ssh USER@ip'.
#
# The default value 'simulator' is fine in most cases. So probably you don't want to change this.
#
USER=simulator

#
# The options added to SSH. Probably you don't need to change this.
#
SSH_OPTIONS=-o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null

#
# The name of the security group, the creates machines belong to.
#
# EC2:
# If the security group doesn't exist, it will automatically be created. If you did not specify
# a locationId in the MACHINES_SPEC, the location will be us-east-1. If it does exist, make sure
# that port 22, 9000, 9001 and 5701..5751 are open. In most cases the default value is fine.
#
# GCE:
# The value is not relevant.
SECURITY_GROUP=simulator

#
# EC2:
# You can specify VPC subnet ID. If SUBNET_ID is different than 'default' then machines are created in EC2 VPC and
# the SECURITY_GROUP option is ignored.
#
# SUBNET_ID has to exist before it's used.
#
# GCE:
# The value is not relevant
#
# Example 'SUBNET_ID=subnet-89679cfe'
#
SUBNET_ID=default

#
# EC2:
# You can specify the PLACEMEN_GROUP
#
# Example 'PLACEMENT_GROUP=hazelcast-placement'
#
# Set this when more reliable performance is required.
#
PLACEMENT_GROUP=default

#
# https://aws.amazon.com/ec2/spot/pricing/
#
#EC2_SPOT_PRICE=0.3

# =====================================================================
# Hardware and OS selection
# =====================================================================
#
# For the options that can be set on the spec check the following link:
# http://javadocs.jclouds.cloudbees.net/org/jclouds/compute/domain/TemplateBuilderSpec.html
#
# Operating system and version can be selected using:
#   osVersionMatches=[String]
#   os64Bit=[boolean]
#   osArchMatches=[String]
#   osDescriptionMatches=[String]
# For list of available operating systems see:
# http://javadocs.jclouds.cloudbees.net/org/jclouds/compute/domain/OsFamily.html
#
# Examples:
#       osFamily=UBUNTU,osVersionMatches=12.04
#       osFamily=CENTOS
#       osFamily=RHEL,os64Bit
#       osDescription=.*Ubuntu 12.04.*
#
# A specific AMI can also be selected using an imageId e.g.
#
#       imageId=us-east-1/ami-fb8e9292
#
# Warning:
#       If you want to use RHEL, use the following ami us-east-1/ami-1b3b2472.
#       The ones listed in EC2 are not working; jclouds messes up with the account initialization.
#
# Hardware can be selected e.g.
# MACHINE_SPEC=minCores=2,minRam=2048
#
# You can also explicitly set the hardware id, e.g. on EC2:
# hardwareId=m1.small.
#
# For a full listing of hardware ids on EC2, check the following link
# http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/index.html?instance-types.html
#
# To set a specific region, use locationId, e.g. locationId=us-east-1a.
# The security group will be created in the location specified.
#
# Some useful regions are:
# EU (Ireland) Region	eu-west-1
# Asia Pacific (Sydney) Region	ap-southeast-2
# US East (Northern Virginia) Region	us-east-1
# US West (Northern California) Region	us-west-1
#
# The default region is us-east-1
# The default AMI is RHEL_6.5_x64
#
MACHINE_SPEC=hardwareId=c3.xlarge,imageId=us-east-1/ami-1b3b2472

#
# EC2 Instance Storage
#
# If you specify an EC2 hardwareId with an ephemeral device the Provisioner will create a filesystem and mount it automatically.
# You can override the default mkfs and mount options with the following properties.
#
# The default options are optimized for SSD devices.
#
INSTANCE_STORAGE_MKFS_OPTIONS=-t ext4 -E nodiscard
INSTANCE_STORAGE_MOUNT_OPTIONS=defaults,nofail,discard,noatime,relatime

# =====================================================================
# Hazelcast Version Configuration
# =====================================================================
#
# The workers can be configured to use a specific version of Hazelcast; so you don't need to depend on the Hazelcast
# version provided by the simulator, but you can override it with a specific version.
#
# The Hazelcast version can be configured in different ways:
#   outofthebox             : if you are fine with the one provided by the Simulator itself.
#   maven=version           : if you want to use a specific version from the maven repository, e.g.
#                                   maven=3.2
#                                   maven=3.3-SNAPSHOT
#                             Local Hazelcast artifacts will be preferred, so you can checkout e.g. an experimental
#                             branch, build the artifacts locally. This will all be done on the local machine, not
#                             on the agent machine.
#   bringmyown              : if you want to bring your own dependencies, for more information checkout out the
#                             --workerClassPath setting on the Controller.
#   git=version             : if you want Simulator to use a specific version of Hazelcast from Git, e.g.:
#                                   git=f0288f713    to build a specific revision
#                                   git=v3.2.3       to build a version from a Git tag
#                                   git=myRepository/myBranch - to build a version from a branch in a specific repository.
#   Use GIT_CUSTOM_REPOSITORIES to specify custom repositories. The main Hazelcast repository is always named "origin".
#
VERSION_SPEC=outofthebox

# When HAZELCAST_VERSION_SPEC is set to Git then it will download Hazelcast sources to this directory.
#
#
GIT_BUILD_DIR=~/.hazelcast-build/

# Comma separated list of additional Git repositories to be fetched when HAZELCAST_VERSION_SPEC is set to Git.
#
# Simulator will always fetch https://github.com/hazelcast/hazelcast
# This property specifies additional repositories. You can use both remote and local repositories.
# Remote repositories must be accessible for anonymous, local repositories must be accessible for current user.
#
# Default value: empty, only the main Hazelcast repository is used by default.
#
#GIT_CUSTOM_REPOSITORIES=myFork=https://github.com/jerrinot/hazelcast.git,localRepo=/home/jara/devel/oss/hazelcast

# Path to a local Maven installation to use when HAZELCAST_VERSION_SPEC is set to Git.
#
# Default value: Simulator expects 'mvn' binary to be available on a PATH.
#
#MVN_EXECUTABLE=/usr/bin/mvn

# =====================================================================
# JDK Installation
# =====================================================================
#
# Warning:
#   Currently only 64 bit JVMs are going to be installed if you select something else then outofthebox.
#   So make sure that your OS is 64 bits! On option to select 32/64 bits will be added in the future.
#
# The following 4 flavors are available:
#   oracle
#   openjdk
#   ibm
#   outofthebox
# out of the box is the one provided by the image. So no software is installed by the Simulator.
#
JDK_FLAVOR=oracle

#
# If a 64 bits JVM should be installed. Currently only true is allowed.
#
JDK_64_BITS=true

#
# The version of java to install.
#
# Oracle supports 6/7/8/9 (Oracle 9 is the early access version)
#       when using Oracle 9, add the following to the jvm parameters '--add-modules java.xml.bind'
#       for more information see https://bugs.openjdk.java.net/browse/JDK-8157670
# OpenJDK supports 6/7
# IBM supports 6/7/8 (8 is an early access version)
#
# Fine grained control on the version will be added in the future.
#
JDK_VERSION=8

#
# URL of Management Center
#
# If set to a valid URL the Management Center will be configured for member nodes.
#
# Example: MANAGEMENT_CENTER_URL=http://localhost:8083/mancenter
#
# Default: none
#
MANAGEMENT_CENTER_URL=none
#
# The update interval for the management center
#
MANAGEMENT_CENTER_UPDATE_INTERVAL=30

#
# Size of thread pool for Agent to connect to Worker instances.
#
# The default of 0 uses the default number of threads of Netty.
#
AGENT_THREAD_POOL_SIZE = 0

#
# Port for the Agent
#
# Defines the port the Simulator Agent will listens to.
#
AGENT_PORT = 9000

#
# Port for the Hazelcast instance
#
# Defines the port the Hazelcast instances use.
#
HAZELCAST_PORT = 5701
HAZELCAST_PORT_RANGE_SIZE = 50

#
# Interval for WorkerPerformanceMonitor
#
# Defines the interval for throughput and latency snapshots on the workers. 0 disabled tracking performance.
#
WORKER_PERFORMANCE_MONITOR_INTERVAL_SECONDS = 10

#
# Interval for WorkerPingThread
#
# Defines the interval for the WorkerPingThread to ping all workers.
# Also defines the LAST_SEEN_TIMEOUT_SECONDS for the WorkerProcessFailureMonitor which is this value multiplied by 3.
#
# Set to -1 to disable PING and WORKER_TIMEOUT detection.
#
WORKER_PING_INTERVAL_SECONDS = 60

#
# Shutdown delay for Member Workers
#
# Defines the delay for the shutdown of Member Workers. When the Coordinator sends the shutdown operation to all Workers,
# the Client Workers execute it immediately, while the Member Workers will wait the defined seconds. This should prevent
# unnecessary exceptions on the clients, due to their connected Hazelcast Member instance being shutdown first.
#
# Will not be used if there are just Member Workers in the cluster.
#
MEMBER_WORKER_SHUTDOWN_DELAY_SECONDS = 5

#
# Timeout to wait for Worker shutdown
#
# Defines the timeout for the Worker shutdown in the Coordinator. After the timeout occurred the Coordinator will
# not wait any longer for Workers to stop. They may still be running and must be manually killed before a new
# Simulator run can be started. You can use the Provisioner tool for this task: provisioner --kill
#
WAIT_FOR_WORKER_SHUTDOWN_TIMEOUT_SECONDS = 120

#
# Timeout in seconds to wait for a worker jvm to startup
#
WORKER_STARTUP_TIMEOUT_SECONDS=60

#
# The port the coordinator remote can contact the coordinator.
#
# To disable the remote access mode, set the port to 0.
#
COORDINATOR_PORT=5000

#
# The timeout in seconds waiting for a test to complete after it ends the run phase.
#
TEST_COMPLETION_TIMEOUT_SECONDS=300
